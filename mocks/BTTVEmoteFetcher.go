// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	bttv "github.com/julez-dev/chatuino/twitch/bttv"

	mock "github.com/stretchr/testify/mock"
)

// BTTVEmoteFetcher is an autogenerated mock type for the BTTVEmoteFetcher type
type BTTVEmoteFetcher struct {
	mock.Mock
}

type BTTVEmoteFetcher_Expecter struct {
	mock *mock.Mock
}

func (_m *BTTVEmoteFetcher) EXPECT() *BTTVEmoteFetcher_Expecter {
	return &BTTVEmoteFetcher_Expecter{mock: &_m.Mock}
}

// GetChannelEmotes provides a mock function with given fields: ctx, broadcaster
func (_m *BTTVEmoteFetcher) GetChannelEmotes(ctx context.Context, broadcaster string) (bttv.UserResponse, error) {
	ret := _m.Called(ctx, broadcaster)

	if len(ret) == 0 {
		panic("no return value specified for GetChannelEmotes")
	}

	var r0 bttv.UserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bttv.UserResponse, error)); ok {
		return rf(ctx, broadcaster)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bttv.UserResponse); ok {
		r0 = rf(ctx, broadcaster)
	} else {
		r0 = ret.Get(0).(bttv.UserResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, broadcaster)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BTTVEmoteFetcher_GetChannelEmotes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChannelEmotes'
type BTTVEmoteFetcher_GetChannelEmotes_Call struct {
	*mock.Call
}

// GetChannelEmotes is a helper method to define mock.On call
//   - ctx context.Context
//   - broadcaster string
func (_e *BTTVEmoteFetcher_Expecter) GetChannelEmotes(ctx interface{}, broadcaster interface{}) *BTTVEmoteFetcher_GetChannelEmotes_Call {
	return &BTTVEmoteFetcher_GetChannelEmotes_Call{Call: _e.mock.On("GetChannelEmotes", ctx, broadcaster)}
}

func (_c *BTTVEmoteFetcher_GetChannelEmotes_Call) Run(run func(ctx context.Context, broadcaster string)) *BTTVEmoteFetcher_GetChannelEmotes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *BTTVEmoteFetcher_GetChannelEmotes_Call) Return(_a0 bttv.UserResponse, _a1 error) *BTTVEmoteFetcher_GetChannelEmotes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BTTVEmoteFetcher_GetChannelEmotes_Call) RunAndReturn(run func(context.Context, string) (bttv.UserResponse, error)) *BTTVEmoteFetcher_GetChannelEmotes_Call {
	_c.Call.Return(run)
	return _c
}

// GetGlobalEmotes provides a mock function with given fields: _a0
func (_m *BTTVEmoteFetcher) GetGlobalEmotes(_a0 context.Context) (bttv.GlobalEmoteResponse, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetGlobalEmotes")
	}

	var r0 bttv.GlobalEmoteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (bttv.GlobalEmoteResponse, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) bttv.GlobalEmoteResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bttv.GlobalEmoteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BTTVEmoteFetcher_GetGlobalEmotes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGlobalEmotes'
type BTTVEmoteFetcher_GetGlobalEmotes_Call struct {
	*mock.Call
}

// GetGlobalEmotes is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *BTTVEmoteFetcher_Expecter) GetGlobalEmotes(_a0 interface{}) *BTTVEmoteFetcher_GetGlobalEmotes_Call {
	return &BTTVEmoteFetcher_GetGlobalEmotes_Call{Call: _e.mock.On("GetGlobalEmotes", _a0)}
}

func (_c *BTTVEmoteFetcher_GetGlobalEmotes_Call) Run(run func(_a0 context.Context)) *BTTVEmoteFetcher_GetGlobalEmotes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *BTTVEmoteFetcher_GetGlobalEmotes_Call) Return(_a0 bttv.GlobalEmoteResponse, _a1 error) *BTTVEmoteFetcher_GetGlobalEmotes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BTTVEmoteFetcher_GetGlobalEmotes_Call) RunAndReturn(run func(context.Context) (bttv.GlobalEmoteResponse, error)) *BTTVEmoteFetcher_GetGlobalEmotes_Call {
	_c.Call.Return(run)
	return _c
}

// NewBTTVEmoteFetcher creates a new instance of BTTVEmoteFetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBTTVEmoteFetcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *BTTVEmoteFetcher {
	mock := &BTTVEmoteFetcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
