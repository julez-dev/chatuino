// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	multiplex "github.com/julez-dev/chatuino/multiplex"
	mock "github.com/stretchr/testify/mock"
)

// ChatPool is an autogenerated mock type for the ChatPool type
type ChatPool struct {
	mock.Mock
}

type ChatPool_Expecter struct {
	mock *mock.Mock
}

func (_m *ChatPool) EXPECT() *ChatPool_Expecter {
	return &ChatPool_Expecter{mock: &_m.Mock}
}

// ListenAndServe provides a mock function with given fields: inbound
func (_m *ChatPool) ListenAndServe(inbound <-chan multiplex.InboundMessage) <-chan multiplex.OutboundMessage {
	ret := _m.Called(inbound)

	if len(ret) == 0 {
		panic("no return value specified for ListenAndServe")
	}

	var r0 <-chan multiplex.OutboundMessage
	if rf, ok := ret.Get(0).(func(<-chan multiplex.InboundMessage) <-chan multiplex.OutboundMessage); ok {
		r0 = rf(inbound)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan multiplex.OutboundMessage)
		}
	}

	return r0
}

// ChatPool_ListenAndServe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListenAndServe'
type ChatPool_ListenAndServe_Call struct {
	*mock.Call
}

// ListenAndServe is a helper method to define mock.On call
//   - inbound <-chan multiplex.InboundMessage
func (_e *ChatPool_Expecter) ListenAndServe(inbound interface{}) *ChatPool_ListenAndServe_Call {
	return &ChatPool_ListenAndServe_Call{Call: _e.mock.On("ListenAndServe", inbound)}
}

func (_c *ChatPool_ListenAndServe_Call) Run(run func(inbound <-chan multiplex.InboundMessage)) *ChatPool_ListenAndServe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(<-chan multiplex.InboundMessage))
	})
	return _c
}

func (_c *ChatPool_ListenAndServe_Call) Return(_a0 <-chan multiplex.OutboundMessage) *ChatPool_ListenAndServe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ChatPool_ListenAndServe_Call) RunAndReturn(run func(<-chan multiplex.InboundMessage) <-chan multiplex.OutboundMessage) *ChatPool_ListenAndServe_Call {
	_c.Call.Return(run)
	return _c
}

// NewChatPool creates a new instance of ChatPool. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChatPool(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChatPool {
	mock := &ChatPool{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
