// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	multiplex "github.com/julez-dev/chatuino/multiplex"
	mock "github.com/stretchr/testify/mock"
)

// EventSubPool is an autogenerated mock type for the EventSubPool type
type EventSubPool struct {
	mock.Mock
}

type EventSubPool_Expecter struct {
	mock *mock.Mock
}

func (_m *EventSubPool) EXPECT() *EventSubPool_Expecter {
	return &EventSubPool_Expecter{mock: &_m.Mock}
}

// ListenAndServe provides a mock function with given fields: inbound
func (_m *EventSubPool) ListenAndServe(inbound <-chan multiplex.EventSubInboundMessage) error {
	ret := _m.Called(inbound)

	if len(ret) == 0 {
		panic("no return value specified for ListenAndServe")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(<-chan multiplex.EventSubInboundMessage) error); ok {
		r0 = rf(inbound)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EventSubPool_ListenAndServe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListenAndServe'
type EventSubPool_ListenAndServe_Call struct {
	*mock.Call
}

// ListenAndServe is a helper method to define mock.On call
//   - inbound <-chan multiplex.EventSubInboundMessage
func (_e *EventSubPool_Expecter) ListenAndServe(inbound interface{}) *EventSubPool_ListenAndServe_Call {
	return &EventSubPool_ListenAndServe_Call{Call: _e.mock.On("ListenAndServe", inbound)}
}

func (_c *EventSubPool_ListenAndServe_Call) Run(run func(inbound <-chan multiplex.EventSubInboundMessage)) *EventSubPool_ListenAndServe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(<-chan multiplex.EventSubInboundMessage))
	})
	return _c
}

func (_c *EventSubPool_ListenAndServe_Call) Return(_a0 error) *EventSubPool_ListenAndServe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EventSubPool_ListenAndServe_Call) RunAndReturn(run func(<-chan multiplex.EventSubInboundMessage) error) *EventSubPool_ListenAndServe_Call {
	_c.Call.Return(run)
	return _c
}

// NewEventSubPool creates a new instance of EventSubPool. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventSubPool(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventSubPool {
	mock := &EventSubPool{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
