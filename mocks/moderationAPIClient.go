// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	twitch "github.com/julez-dev/chatuino/twitch"
)

// moderationAPIClient is an autogenerated mock type for the moderationAPIClient type
type moderationAPIClient struct {
	mock.Mock
}

type moderationAPIClient_Expecter struct {
	mock *mock.Mock
}

func (_m *moderationAPIClient) EXPECT() *moderationAPIClient_Expecter {
	return &moderationAPIClient_Expecter{mock: &_m.Mock}
}

// BanUser provides a mock function with given fields: ctx, broadcasterID, moderatorID, data
func (_m *moderationAPIClient) BanUser(ctx context.Context, broadcasterID string, moderatorID string, data twitch.BanUserData) error {
	ret := _m.Called(ctx, broadcasterID, moderatorID, data)

	if len(ret) == 0 {
		panic("no return value specified for BanUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, twitch.BanUserData) error); ok {
		r0 = rf(ctx, broadcasterID, moderatorID, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// moderationAPIClient_BanUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BanUser'
type moderationAPIClient_BanUser_Call struct {
	*mock.Call
}

// BanUser is a helper method to define mock.On call
//   - ctx context.Context
//   - broadcasterID string
//   - moderatorID string
//   - data twitch.BanUserData
func (_e *moderationAPIClient_Expecter) BanUser(ctx interface{}, broadcasterID interface{}, moderatorID interface{}, data interface{}) *moderationAPIClient_BanUser_Call {
	return &moderationAPIClient_BanUser_Call{Call: _e.mock.On("BanUser", ctx, broadcasterID, moderatorID, data)}
}

func (_c *moderationAPIClient_BanUser_Call) Run(run func(ctx context.Context, broadcasterID string, moderatorID string, data twitch.BanUserData)) *moderationAPIClient_BanUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(twitch.BanUserData))
	})
	return _c
}

func (_c *moderationAPIClient_BanUser_Call) Return(_a0 error) *moderationAPIClient_BanUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *moderationAPIClient_BanUser_Call) RunAndReturn(run func(context.Context, string, string, twitch.BanUserData) error) *moderationAPIClient_BanUser_Call {
	_c.Call.Return(run)
	return _c
}

// FetchUnbanRequests provides a mock function with given fields: ctx, broadcasterID, moderatorID
func (_m *moderationAPIClient) FetchUnbanRequests(ctx context.Context, broadcasterID string, moderatorID string) ([]twitch.UnbanRequest, error) {
	ret := _m.Called(ctx, broadcasterID, moderatorID)

	if len(ret) == 0 {
		panic("no return value specified for FetchUnbanRequests")
	}

	var r0 []twitch.UnbanRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]twitch.UnbanRequest, error)); ok {
		return rf(ctx, broadcasterID, moderatorID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []twitch.UnbanRequest); ok {
		r0 = rf(ctx, broadcasterID, moderatorID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]twitch.UnbanRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, broadcasterID, moderatorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// moderationAPIClient_FetchUnbanRequests_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchUnbanRequests'
type moderationAPIClient_FetchUnbanRequests_Call struct {
	*mock.Call
}

// FetchUnbanRequests is a helper method to define mock.On call
//   - ctx context.Context
//   - broadcasterID string
//   - moderatorID string
func (_e *moderationAPIClient_Expecter) FetchUnbanRequests(ctx interface{}, broadcasterID interface{}, moderatorID interface{}) *moderationAPIClient_FetchUnbanRequests_Call {
	return &moderationAPIClient_FetchUnbanRequests_Call{Call: _e.mock.On("FetchUnbanRequests", ctx, broadcasterID, moderatorID)}
}

func (_c *moderationAPIClient_FetchUnbanRequests_Call) Run(run func(ctx context.Context, broadcasterID string, moderatorID string)) *moderationAPIClient_FetchUnbanRequests_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *moderationAPIClient_FetchUnbanRequests_Call) Return(_a0 []twitch.UnbanRequest, _a1 error) *moderationAPIClient_FetchUnbanRequests_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *moderationAPIClient_FetchUnbanRequests_Call) RunAndReturn(run func(context.Context, string, string) ([]twitch.UnbanRequest, error)) *moderationAPIClient_FetchUnbanRequests_Call {
	_c.Call.Return(run)
	return _c
}

// GetChatSettings provides a mock function with given fields: ctx, broadcasterID, moderatorID
func (_m *moderationAPIClient) GetChatSettings(ctx context.Context, broadcasterID string, moderatorID string) (twitch.GetChatSettingsResponse, error) {
	ret := _m.Called(ctx, broadcasterID, moderatorID)

	if len(ret) == 0 {
		panic("no return value specified for GetChatSettings")
	}

	var r0 twitch.GetChatSettingsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (twitch.GetChatSettingsResponse, error)); ok {
		return rf(ctx, broadcasterID, moderatorID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) twitch.GetChatSettingsResponse); ok {
		r0 = rf(ctx, broadcasterID, moderatorID)
	} else {
		r0 = ret.Get(0).(twitch.GetChatSettingsResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, broadcasterID, moderatorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// moderationAPIClient_GetChatSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChatSettings'
type moderationAPIClient_GetChatSettings_Call struct {
	*mock.Call
}

// GetChatSettings is a helper method to define mock.On call
//   - ctx context.Context
//   - broadcasterID string
//   - moderatorID string
func (_e *moderationAPIClient_Expecter) GetChatSettings(ctx interface{}, broadcasterID interface{}, moderatorID interface{}) *moderationAPIClient_GetChatSettings_Call {
	return &moderationAPIClient_GetChatSettings_Call{Call: _e.mock.On("GetChatSettings", ctx, broadcasterID, moderatorID)}
}

func (_c *moderationAPIClient_GetChatSettings_Call) Run(run func(ctx context.Context, broadcasterID string, moderatorID string)) *moderationAPIClient_GetChatSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *moderationAPIClient_GetChatSettings_Call) Return(_a0 twitch.GetChatSettingsResponse, _a1 error) *moderationAPIClient_GetChatSettings_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *moderationAPIClient_GetChatSettings_Call) RunAndReturn(run func(context.Context, string, string) (twitch.GetChatSettingsResponse, error)) *moderationAPIClient_GetChatSettings_Call {
	_c.Call.Return(run)
	return _c
}

// GetStreamInfo provides a mock function with given fields: ctx, broadcastID
func (_m *moderationAPIClient) GetStreamInfo(ctx context.Context, broadcastID []string) (twitch.GetStreamsResponse, error) {
	ret := _m.Called(ctx, broadcastID)

	if len(ret) == 0 {
		panic("no return value specified for GetStreamInfo")
	}

	var r0 twitch.GetStreamsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) (twitch.GetStreamsResponse, error)); ok {
		return rf(ctx, broadcastID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) twitch.GetStreamsResponse); ok {
		r0 = rf(ctx, broadcastID)
	} else {
		r0 = ret.Get(0).(twitch.GetStreamsResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, broadcastID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// moderationAPIClient_GetStreamInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStreamInfo'
type moderationAPIClient_GetStreamInfo_Call struct {
	*mock.Call
}

// GetStreamInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - broadcastID []string
func (_e *moderationAPIClient_Expecter) GetStreamInfo(ctx interface{}, broadcastID interface{}) *moderationAPIClient_GetStreamInfo_Call {
	return &moderationAPIClient_GetStreamInfo_Call{Call: _e.mock.On("GetStreamInfo", ctx, broadcastID)}
}

func (_c *moderationAPIClient_GetStreamInfo_Call) Run(run func(ctx context.Context, broadcastID []string)) *moderationAPIClient_GetStreamInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *moderationAPIClient_GetStreamInfo_Call) Return(_a0 twitch.GetStreamsResponse, _a1 error) *moderationAPIClient_GetStreamInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *moderationAPIClient_GetStreamInfo_Call) RunAndReturn(run func(context.Context, []string) (twitch.GetStreamsResponse, error)) *moderationAPIClient_GetStreamInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsers provides a mock function with given fields: ctx, logins, ids
func (_m *moderationAPIClient) GetUsers(ctx context.Context, logins []string, ids []string) (twitch.UserResponse, error) {
	ret := _m.Called(ctx, logins, ids)

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 twitch.UserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, []string) (twitch.UserResponse, error)); ok {
		return rf(ctx, logins, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string, []string) twitch.UserResponse); ok {
		r0 = rf(ctx, logins, ids)
	} else {
		r0 = ret.Get(0).(twitch.UserResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string, []string) error); ok {
		r1 = rf(ctx, logins, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// moderationAPIClient_GetUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsers'
type moderationAPIClient_GetUsers_Call struct {
	*mock.Call
}

// GetUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - logins []string
//   - ids []string
func (_e *moderationAPIClient_Expecter) GetUsers(ctx interface{}, logins interface{}, ids interface{}) *moderationAPIClient_GetUsers_Call {
	return &moderationAPIClient_GetUsers_Call{Call: _e.mock.On("GetUsers", ctx, logins, ids)}
}

func (_c *moderationAPIClient_GetUsers_Call) Run(run func(ctx context.Context, logins []string, ids []string)) *moderationAPIClient_GetUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string), args[2].([]string))
	})
	return _c
}

func (_c *moderationAPIClient_GetUsers_Call) Return(_a0 twitch.UserResponse, _a1 error) *moderationAPIClient_GetUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *moderationAPIClient_GetUsers_Call) RunAndReturn(run func(context.Context, []string, []string) (twitch.UserResponse, error)) *moderationAPIClient_GetUsers_Call {
	_c.Call.Return(run)
	return _c
}

// ResolveBanRequest provides a mock function with given fields: ctx, broadcasterID, moderatorID, requestID, status
func (_m *moderationAPIClient) ResolveBanRequest(ctx context.Context, broadcasterID string, moderatorID string, requestID string, status string) (twitch.UnbanRequest, error) {
	ret := _m.Called(ctx, broadcasterID, moderatorID, requestID, status)

	if len(ret) == 0 {
		panic("no return value specified for ResolveBanRequest")
	}

	var r0 twitch.UnbanRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) (twitch.UnbanRequest, error)); ok {
		return rf(ctx, broadcasterID, moderatorID, requestID, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) twitch.UnbanRequest); ok {
		r0 = rf(ctx, broadcasterID, moderatorID, requestID, status)
	} else {
		r0 = ret.Get(0).(twitch.UnbanRequest)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) error); ok {
		r1 = rf(ctx, broadcasterID, moderatorID, requestID, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// moderationAPIClient_ResolveBanRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolveBanRequest'
type moderationAPIClient_ResolveBanRequest_Call struct {
	*mock.Call
}

// ResolveBanRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - broadcasterID string
//   - moderatorID string
//   - requestID string
//   - status string
func (_e *moderationAPIClient_Expecter) ResolveBanRequest(ctx interface{}, broadcasterID interface{}, moderatorID interface{}, requestID interface{}, status interface{}) *moderationAPIClient_ResolveBanRequest_Call {
	return &moderationAPIClient_ResolveBanRequest_Call{Call: _e.mock.On("ResolveBanRequest", ctx, broadcasterID, moderatorID, requestID, status)}
}

func (_c *moderationAPIClient_ResolveBanRequest_Call) Run(run func(ctx context.Context, broadcasterID string, moderatorID string, requestID string, status string)) *moderationAPIClient_ResolveBanRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *moderationAPIClient_ResolveBanRequest_Call) Return(_a0 twitch.UnbanRequest, _a1 error) *moderationAPIClient_ResolveBanRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *moderationAPIClient_ResolveBanRequest_Call) RunAndReturn(run func(context.Context, string, string, string, string) (twitch.UnbanRequest, error)) *moderationAPIClient_ResolveBanRequest_Call {
	_c.Call.Return(run)
	return _c
}

// UnbanUser provides a mock function with given fields: ctx, broadcasterID, moderatorID, userID
func (_m *moderationAPIClient) UnbanUser(ctx context.Context, broadcasterID string, moderatorID string, userID string) error {
	ret := _m.Called(ctx, broadcasterID, moderatorID, userID)

	if len(ret) == 0 {
		panic("no return value specified for UnbanUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, broadcasterID, moderatorID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// moderationAPIClient_UnbanUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnbanUser'
type moderationAPIClient_UnbanUser_Call struct {
	*mock.Call
}

// UnbanUser is a helper method to define mock.On call
//   - ctx context.Context
//   - broadcasterID string
//   - moderatorID string
//   - userID string
func (_e *moderationAPIClient_Expecter) UnbanUser(ctx interface{}, broadcasterID interface{}, moderatorID interface{}, userID interface{}) *moderationAPIClient_UnbanUser_Call {
	return &moderationAPIClient_UnbanUser_Call{Call: _e.mock.On("UnbanUser", ctx, broadcasterID, moderatorID, userID)}
}

func (_c *moderationAPIClient_UnbanUser_Call) Run(run func(ctx context.Context, broadcasterID string, moderatorID string, userID string)) *moderationAPIClient_UnbanUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *moderationAPIClient_UnbanUser_Call) Return(_a0 error) *moderationAPIClient_UnbanUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *moderationAPIClient_UnbanUser_Call) RunAndReturn(run func(context.Context, string, string, string) error) *moderationAPIClient_UnbanUser_Call {
	_c.Call.Return(run)
	return _c
}

// newModerationAPIClient creates a new instance of moderationAPIClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newModerationAPIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *moderationAPIClient {
	mock := &moderationAPIClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
