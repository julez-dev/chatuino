// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	twitch "github.com/julez-dev/chatuino/twitch"
)

// RecentMessageService is an autogenerated mock type for the RecentMessageService type
type RecentMessageService struct {
	mock.Mock
}

type RecentMessageService_Expecter struct {
	mock *mock.Mock
}

func (_m *RecentMessageService) EXPECT() *RecentMessageService_Expecter {
	return &RecentMessageService_Expecter{mock: &_m.Mock}
}

// GetRecentMessagesFor provides a mock function with given fields: ctx, channelLogin
func (_m *RecentMessageService) GetRecentMessagesFor(ctx context.Context, channelLogin string) ([]twitch.IRCer, error) {
	ret := _m.Called(ctx, channelLogin)

	if len(ret) == 0 {
		panic("no return value specified for GetRecentMessagesFor")
	}

	var r0 []twitch.IRCer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]twitch.IRCer, error)); ok {
		return rf(ctx, channelLogin)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []twitch.IRCer); ok {
		r0 = rf(ctx, channelLogin)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]twitch.IRCer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, channelLogin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RecentMessageService_GetRecentMessagesFor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRecentMessagesFor'
type RecentMessageService_GetRecentMessagesFor_Call struct {
	*mock.Call
}

// GetRecentMessagesFor is a helper method to define mock.On call
//   - ctx context.Context
//   - channelLogin string
func (_e *RecentMessageService_Expecter) GetRecentMessagesFor(ctx interface{}, channelLogin interface{}) *RecentMessageService_GetRecentMessagesFor_Call {
	return &RecentMessageService_GetRecentMessagesFor_Call{Call: _e.mock.On("GetRecentMessagesFor", ctx, channelLogin)}
}

func (_c *RecentMessageService_GetRecentMessagesFor_Call) Run(run func(ctx context.Context, channelLogin string)) *RecentMessageService_GetRecentMessagesFor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *RecentMessageService_GetRecentMessagesFor_Call) Return(_a0 []twitch.IRCer, _a1 error) *RecentMessageService_GetRecentMessagesFor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RecentMessageService_GetRecentMessagesFor_Call) RunAndReturn(run func(context.Context, string) ([]twitch.IRCer, error)) *RecentMessageService_GetRecentMessagesFor_Call {
	_c.Call.Return(run)
	return _c
}

// NewRecentMessageService creates a new instance of RecentMessageService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRecentMessageService(t interface {
	mock.TestingT
	Cleanup(func())
}) *RecentMessageService {
	mock := &RecentMessageService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
