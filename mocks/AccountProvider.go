// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	save "github.com/julez-dev/chatuino/save"
	mock "github.com/stretchr/testify/mock"
)

// AccountProvider is an autogenerated mock type for the AccountProvider type
type AccountProvider struct {
	mock.Mock
}

type AccountProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *AccountProvider) EXPECT() *AccountProvider_Expecter {
	return &AccountProvider_Expecter{mock: &_m.Mock}
}

// GetAccountBy provides a mock function with given fields: id
func (_m *AccountProvider) GetAccountBy(id string) (save.Account, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountBy")
	}

	var r0 save.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (save.Account, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) save.Account); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(save.Account)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountProvider_GetAccountBy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountBy'
type AccountProvider_GetAccountBy_Call struct {
	*mock.Call
}

// GetAccountBy is a helper method to define mock.On call
//   - id string
func (_e *AccountProvider_Expecter) GetAccountBy(id interface{}) *AccountProvider_GetAccountBy_Call {
	return &AccountProvider_GetAccountBy_Call{Call: _e.mock.On("GetAccountBy", id)}
}

func (_c *AccountProvider_GetAccountBy_Call) Run(run func(id string)) *AccountProvider_GetAccountBy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *AccountProvider_GetAccountBy_Call) Return(_a0 save.Account, _a1 error) *AccountProvider_GetAccountBy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccountProvider_GetAccountBy_Call) RunAndReturn(run func(string) (save.Account, error)) *AccountProvider_GetAccountBy_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllAccounts provides a mock function with given fields:
func (_m *AccountProvider) GetAllAccounts() ([]save.Account, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllAccounts")
	}

	var r0 []save.Account
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]save.Account, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []save.Account); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]save.Account)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountProvider_GetAllAccounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllAccounts'
type AccountProvider_GetAllAccounts_Call struct {
	*mock.Call
}

// GetAllAccounts is a helper method to define mock.On call
func (_e *AccountProvider_Expecter) GetAllAccounts() *AccountProvider_GetAllAccounts_Call {
	return &AccountProvider_GetAllAccounts_Call{Call: _e.mock.On("GetAllAccounts")}
}

func (_c *AccountProvider_GetAllAccounts_Call) Run(run func()) *AccountProvider_GetAllAccounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AccountProvider_GetAllAccounts_Call) Return(_a0 []save.Account, _a1 error) *AccountProvider_GetAllAccounts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccountProvider_GetAllAccounts_Call) RunAndReturn(run func() ([]save.Account, error)) *AccountProvider_GetAllAccounts_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTokensFor provides a mock function with given fields: id, accessToken, refreshToken
func (_m *AccountProvider) UpdateTokensFor(id string, accessToken string, refreshToken string) error {
	ret := _m.Called(id, accessToken, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTokensFor")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(id, accessToken, refreshToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AccountProvider_UpdateTokensFor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTokensFor'
type AccountProvider_UpdateTokensFor_Call struct {
	*mock.Call
}

// UpdateTokensFor is a helper method to define mock.On call
//   - id string
//   - accessToken string
//   - refreshToken string
func (_e *AccountProvider_Expecter) UpdateTokensFor(id interface{}, accessToken interface{}, refreshToken interface{}) *AccountProvider_UpdateTokensFor_Call {
	return &AccountProvider_UpdateTokensFor_Call{Call: _e.mock.On("UpdateTokensFor", id, accessToken, refreshToken)}
}

func (_c *AccountProvider_UpdateTokensFor_Call) Run(run func(id string, accessToken string, refreshToken string)) *AccountProvider_UpdateTokensFor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *AccountProvider_UpdateTokensFor_Call) Return(_a0 error) *AccountProvider_UpdateTokensFor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AccountProvider_UpdateTokensFor_Call) RunAndReturn(run func(string, string, string) error) *AccountProvider_UpdateTokensFor_Call {
	_c.Call.Return(run)
	return _c
}

// NewAccountProvider creates a new instance of AccountProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccountProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccountProvider {
	mock := &AccountProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
