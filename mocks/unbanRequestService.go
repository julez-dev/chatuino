// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	twitch "github.com/julez-dev/chatuino/twitch"
	mock "github.com/stretchr/testify/mock"
)

// unbanRequestService is an autogenerated mock type for the unbanRequestService type
type unbanRequestService struct {
	mock.Mock
}

type unbanRequestService_Expecter struct {
	mock *mock.Mock
}

func (_m *unbanRequestService) EXPECT() *unbanRequestService_Expecter {
	return &unbanRequestService_Expecter{mock: &_m.Mock}
}

// FetchUnbanRequests provides a mock function with given fields: ctx, broadcasterID, moderatorID
func (_m *unbanRequestService) FetchUnbanRequests(ctx context.Context, broadcasterID string, moderatorID string) ([]twitch.UnbanRequest, error) {
	ret := _m.Called(ctx, broadcasterID, moderatorID)

	if len(ret) == 0 {
		panic("no return value specified for FetchUnbanRequests")
	}

	var r0 []twitch.UnbanRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]twitch.UnbanRequest, error)); ok {
		return rf(ctx, broadcasterID, moderatorID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []twitch.UnbanRequest); ok {
		r0 = rf(ctx, broadcasterID, moderatorID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]twitch.UnbanRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, broadcasterID, moderatorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// unbanRequestService_FetchUnbanRequests_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchUnbanRequests'
type unbanRequestService_FetchUnbanRequests_Call struct {
	*mock.Call
}

// FetchUnbanRequests is a helper method to define mock.On call
//   - ctx context.Context
//   - broadcasterID string
//   - moderatorID string
func (_e *unbanRequestService_Expecter) FetchUnbanRequests(ctx interface{}, broadcasterID interface{}, moderatorID interface{}) *unbanRequestService_FetchUnbanRequests_Call {
	return &unbanRequestService_FetchUnbanRequests_Call{Call: _e.mock.On("FetchUnbanRequests", ctx, broadcasterID, moderatorID)}
}

func (_c *unbanRequestService_FetchUnbanRequests_Call) Run(run func(ctx context.Context, broadcasterID string, moderatorID string)) *unbanRequestService_FetchUnbanRequests_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *unbanRequestService_FetchUnbanRequests_Call) Return(_a0 []twitch.UnbanRequest, _a1 error) *unbanRequestService_FetchUnbanRequests_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *unbanRequestService_FetchUnbanRequests_Call) RunAndReturn(run func(context.Context, string, string) ([]twitch.UnbanRequest, error)) *unbanRequestService_FetchUnbanRequests_Call {
	_c.Call.Return(run)
	return _c
}

// ResolveBanRequest provides a mock function with given fields: ctx, broadcasterID, moderatorID, requestID, status
func (_m *unbanRequestService) ResolveBanRequest(ctx context.Context, broadcasterID string, moderatorID string, requestID string, status string) (twitch.UnbanRequest, error) {
	ret := _m.Called(ctx, broadcasterID, moderatorID, requestID, status)

	if len(ret) == 0 {
		panic("no return value specified for ResolveBanRequest")
	}

	var r0 twitch.UnbanRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) (twitch.UnbanRequest, error)); ok {
		return rf(ctx, broadcasterID, moderatorID, requestID, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) twitch.UnbanRequest); ok {
		r0 = rf(ctx, broadcasterID, moderatorID, requestID, status)
	} else {
		r0 = ret.Get(0).(twitch.UnbanRequest)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) error); ok {
		r1 = rf(ctx, broadcasterID, moderatorID, requestID, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// unbanRequestService_ResolveBanRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolveBanRequest'
type unbanRequestService_ResolveBanRequest_Call struct {
	*mock.Call
}

// ResolveBanRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - broadcasterID string
//   - moderatorID string
//   - requestID string
//   - status string
func (_e *unbanRequestService_Expecter) ResolveBanRequest(ctx interface{}, broadcasterID interface{}, moderatorID interface{}, requestID interface{}, status interface{}) *unbanRequestService_ResolveBanRequest_Call {
	return &unbanRequestService_ResolveBanRequest_Call{Call: _e.mock.On("ResolveBanRequest", ctx, broadcasterID, moderatorID, requestID, status)}
}

func (_c *unbanRequestService_ResolveBanRequest_Call) Run(run func(ctx context.Context, broadcasterID string, moderatorID string, requestID string, status string)) *unbanRequestService_ResolveBanRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *unbanRequestService_ResolveBanRequest_Call) Return(_a0 twitch.UnbanRequest, _a1 error) *unbanRequestService_ResolveBanRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *unbanRequestService_ResolveBanRequest_Call) RunAndReturn(run func(context.Context, string, string, string, string) (twitch.UnbanRequest, error)) *unbanRequestService_ResolveBanRequest_Call {
	_c.Call.Return(run)
	return _c
}

// newUnbanRequestService creates a new instance of unbanRequestService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newUnbanRequestService(t interface {
	mock.TestingT
	Cleanup(func())
}) *unbanRequestService {
	mock := &unbanRequestService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
