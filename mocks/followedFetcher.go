// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	twitch "github.com/julez-dev/chatuino/twitch"
)

// followedFetcher is an autogenerated mock type for the followedFetcher type
type followedFetcher struct {
	mock.Mock
}

type followedFetcher_Expecter struct {
	mock *mock.Mock
}

func (_m *followedFetcher) EXPECT() *followedFetcher_Expecter {
	return &followedFetcher_Expecter{mock: &_m.Mock}
}

// FetchUserFollowedChannels provides a mock function with given fields: ctx, userID, broadcasterID
func (_m *followedFetcher) FetchUserFollowedChannels(ctx context.Context, userID string, broadcasterID string) ([]twitch.FollowedChannel, error) {
	ret := _m.Called(ctx, userID, broadcasterID)

	if len(ret) == 0 {
		panic("no return value specified for FetchUserFollowedChannels")
	}

	var r0 []twitch.FollowedChannel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]twitch.FollowedChannel, error)); ok {
		return rf(ctx, userID, broadcasterID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []twitch.FollowedChannel); ok {
		r0 = rf(ctx, userID, broadcasterID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]twitch.FollowedChannel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userID, broadcasterID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// followedFetcher_FetchUserFollowedChannels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchUserFollowedChannels'
type followedFetcher_FetchUserFollowedChannels_Call struct {
	*mock.Call
}

// FetchUserFollowedChannels is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - broadcasterID string
func (_e *followedFetcher_Expecter) FetchUserFollowedChannels(ctx interface{}, userID interface{}, broadcasterID interface{}) *followedFetcher_FetchUserFollowedChannels_Call {
	return &followedFetcher_FetchUserFollowedChannels_Call{Call: _e.mock.On("FetchUserFollowedChannels", ctx, userID, broadcasterID)}
}

func (_c *followedFetcher_FetchUserFollowedChannels_Call) Run(run func(ctx context.Context, userID string, broadcasterID string)) *followedFetcher_FetchUserFollowedChannels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *followedFetcher_FetchUserFollowedChannels_Call) Return(_a0 []twitch.FollowedChannel, _a1 error) *followedFetcher_FetchUserFollowedChannels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *followedFetcher_FetchUserFollowedChannels_Call) RunAndReturn(run func(context.Context, string, string) ([]twitch.FollowedChannel, error)) *followedFetcher_FetchUserFollowedChannels_Call {
	_c.Call.Return(run)
	return _c
}

// newFollowedFetcher creates a new instance of followedFetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newFollowedFetcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *followedFetcher {
	mock := &followedFetcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
