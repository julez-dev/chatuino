// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	emote "github.com/julez-dev/chatuino/emote"

	mock "github.com/stretchr/testify/mock"
)

// EmoteStore is an autogenerated mock type for the EmoteStore type
type EmoteStore struct {
	mock.Mock
}

type EmoteStore_Expecter struct {
	mock *mock.Mock
}

func (_m *EmoteStore) EXPECT() *EmoteStore_Expecter {
	return &EmoteStore_Expecter{mock: &_m.Mock}
}

// GetAllForUser provides a mock function with given fields: id
func (_m *EmoteStore) GetAllForUser(id string) emote.EmoteSet {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetAllForUser")
	}

	var r0 emote.EmoteSet
	if rf, ok := ret.Get(0).(func(string) emote.EmoteSet); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(emote.EmoteSet)
		}
	}

	return r0
}

// EmoteStore_GetAllForUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllForUser'
type EmoteStore_GetAllForUser_Call struct {
	*mock.Call
}

// GetAllForUser is a helper method to define mock.On call
//   - id string
func (_e *EmoteStore_Expecter) GetAllForUser(id interface{}) *EmoteStore_GetAllForUser_Call {
	return &EmoteStore_GetAllForUser_Call{Call: _e.mock.On("GetAllForUser", id)}
}

func (_c *EmoteStore_GetAllForUser_Call) Run(run func(id string)) *EmoteStore_GetAllForUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *EmoteStore_GetAllForUser_Call) Return(_a0 emote.EmoteSet) *EmoteStore_GetAllForUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EmoteStore_GetAllForUser_Call) RunAndReturn(run func(string) emote.EmoteSet) *EmoteStore_GetAllForUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetByText provides a mock function with given fields: channel, text
func (_m *EmoteStore) GetByText(channel string, text string) (emote.Emote, bool) {
	ret := _m.Called(channel, text)

	if len(ret) == 0 {
		panic("no return value specified for GetByText")
	}

	var r0 emote.Emote
	var r1 bool
	if rf, ok := ret.Get(0).(func(string, string) (emote.Emote, bool)); ok {
		return rf(channel, text)
	}
	if rf, ok := ret.Get(0).(func(string, string) emote.Emote); ok {
		r0 = rf(channel, text)
	} else {
		r0 = ret.Get(0).(emote.Emote)
	}

	if rf, ok := ret.Get(1).(func(string, string) bool); ok {
		r1 = rf(channel, text)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// EmoteStore_GetByText_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByText'
type EmoteStore_GetByText_Call struct {
	*mock.Call
}

// GetByText is a helper method to define mock.On call
//   - channel string
//   - text string
func (_e *EmoteStore_Expecter) GetByText(channel interface{}, text interface{}) *EmoteStore_GetByText_Call {
	return &EmoteStore_GetByText_Call{Call: _e.mock.On("GetByText", channel, text)}
}

func (_c *EmoteStore_GetByText_Call) Run(run func(channel string, text string)) *EmoteStore_GetByText_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *EmoteStore_GetByText_Call) Return(_a0 emote.Emote, _a1 bool) *EmoteStore_GetByText_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EmoteStore_GetByText_Call) RunAndReturn(run func(string, string) (emote.Emote, bool)) *EmoteStore_GetByText_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshGlobal provides a mock function with given fields: ctx
func (_m *EmoteStore) RefreshGlobal(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RefreshGlobal")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EmoteStore_RefreshGlobal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshGlobal'
type EmoteStore_RefreshGlobal_Call struct {
	*mock.Call
}

// RefreshGlobal is a helper method to define mock.On call
//   - ctx context.Context
func (_e *EmoteStore_Expecter) RefreshGlobal(ctx interface{}) *EmoteStore_RefreshGlobal_Call {
	return &EmoteStore_RefreshGlobal_Call{Call: _e.mock.On("RefreshGlobal", ctx)}
}

func (_c *EmoteStore_RefreshGlobal_Call) Run(run func(ctx context.Context)) *EmoteStore_RefreshGlobal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *EmoteStore_RefreshGlobal_Call) Return(_a0 error) *EmoteStore_RefreshGlobal_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EmoteStore_RefreshGlobal_Call) RunAndReturn(run func(context.Context) error) *EmoteStore_RefreshGlobal_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshLocal provides a mock function with given fields: ctx, channelID
func (_m *EmoteStore) RefreshLocal(ctx context.Context, channelID string) error {
	ret := _m.Called(ctx, channelID)

	if len(ret) == 0 {
		panic("no return value specified for RefreshLocal")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, channelID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EmoteStore_RefreshLocal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshLocal'
type EmoteStore_RefreshLocal_Call struct {
	*mock.Call
}

// RefreshLocal is a helper method to define mock.On call
//   - ctx context.Context
//   - channelID string
func (_e *EmoteStore_Expecter) RefreshLocal(ctx interface{}, channelID interface{}) *EmoteStore_RefreshLocal_Call {
	return &EmoteStore_RefreshLocal_Call{Call: _e.mock.On("RefreshLocal", ctx, channelID)}
}

func (_c *EmoteStore_RefreshLocal_Call) Run(run func(ctx context.Context, channelID string)) *EmoteStore_RefreshLocal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *EmoteStore_RefreshLocal_Call) Return(_a0 error) *EmoteStore_RefreshLocal_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EmoteStore_RefreshLocal_Call) RunAndReturn(run func(context.Context, string) error) *EmoteStore_RefreshLocal_Call {
	_c.Call.Return(run)
	return _c
}

// NewEmoteStore creates a new instance of EmoteStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEmoteStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *EmoteStore {
	mock := &EmoteStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
