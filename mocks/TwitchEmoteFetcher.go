// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	twitch "github.com/julez-dev/chatuino/twitch"
)

// TwitchEmoteFetcher is an autogenerated mock type for the TwitchEmoteFetcher type
type TwitchEmoteFetcher struct {
	mock.Mock
}

type TwitchEmoteFetcher_Expecter struct {
	mock *mock.Mock
}

func (_m *TwitchEmoteFetcher) EXPECT() *TwitchEmoteFetcher_Expecter {
	return &TwitchEmoteFetcher_Expecter{mock: &_m.Mock}
}

// GetChannelEmotes provides a mock function with given fields: ctx, broadcaster
func (_m *TwitchEmoteFetcher) GetChannelEmotes(ctx context.Context, broadcaster string) (twitch.EmoteResponse, error) {
	ret := _m.Called(ctx, broadcaster)

	if len(ret) == 0 {
		panic("no return value specified for GetChannelEmotes")
	}

	var r0 twitch.EmoteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (twitch.EmoteResponse, error)); ok {
		return rf(ctx, broadcaster)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) twitch.EmoteResponse); ok {
		r0 = rf(ctx, broadcaster)
	} else {
		r0 = ret.Get(0).(twitch.EmoteResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, broadcaster)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TwitchEmoteFetcher_GetChannelEmotes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChannelEmotes'
type TwitchEmoteFetcher_GetChannelEmotes_Call struct {
	*mock.Call
}

// GetChannelEmotes is a helper method to define mock.On call
//   - ctx context.Context
//   - broadcaster string
func (_e *TwitchEmoteFetcher_Expecter) GetChannelEmotes(ctx interface{}, broadcaster interface{}) *TwitchEmoteFetcher_GetChannelEmotes_Call {
	return &TwitchEmoteFetcher_GetChannelEmotes_Call{Call: _e.mock.On("GetChannelEmotes", ctx, broadcaster)}
}

func (_c *TwitchEmoteFetcher_GetChannelEmotes_Call) Run(run func(ctx context.Context, broadcaster string)) *TwitchEmoteFetcher_GetChannelEmotes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TwitchEmoteFetcher_GetChannelEmotes_Call) Return(_a0 twitch.EmoteResponse, _a1 error) *TwitchEmoteFetcher_GetChannelEmotes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TwitchEmoteFetcher_GetChannelEmotes_Call) RunAndReturn(run func(context.Context, string) (twitch.EmoteResponse, error)) *TwitchEmoteFetcher_GetChannelEmotes_Call {
	_c.Call.Return(run)
	return _c
}

// GetGlobalEmotes provides a mock function with given fields: _a0
func (_m *TwitchEmoteFetcher) GetGlobalEmotes(_a0 context.Context) (twitch.EmoteResponse, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetGlobalEmotes")
	}

	var r0 twitch.EmoteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (twitch.EmoteResponse, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) twitch.EmoteResponse); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(twitch.EmoteResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TwitchEmoteFetcher_GetGlobalEmotes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGlobalEmotes'
type TwitchEmoteFetcher_GetGlobalEmotes_Call struct {
	*mock.Call
}

// GetGlobalEmotes is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *TwitchEmoteFetcher_Expecter) GetGlobalEmotes(_a0 interface{}) *TwitchEmoteFetcher_GetGlobalEmotes_Call {
	return &TwitchEmoteFetcher_GetGlobalEmotes_Call{Call: _e.mock.On("GetGlobalEmotes", _a0)}
}

func (_c *TwitchEmoteFetcher_GetGlobalEmotes_Call) Run(run func(_a0 context.Context)) *TwitchEmoteFetcher_GetGlobalEmotes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *TwitchEmoteFetcher_GetGlobalEmotes_Call) Return(_a0 twitch.EmoteResponse, _a1 error) *TwitchEmoteFetcher_GetGlobalEmotes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TwitchEmoteFetcher_GetGlobalEmotes_Call) RunAndReturn(run func(context.Context) (twitch.EmoteResponse, error)) *TwitchEmoteFetcher_GetGlobalEmotes_Call {
	_c.Call.Return(run)
	return _c
}

// NewTwitchEmoteFetcher creates a new instance of TwitchEmoteFetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTwitchEmoteFetcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *TwitchEmoteFetcher {
	mock := &TwitchEmoteFetcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
