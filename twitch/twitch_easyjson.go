// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package twitch

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch(in *jlexer.Lexer, out *UserResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]UserData, 0, 0)
					} else {
						out.Data = []UserData{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v1 UserData
					(v1).UnmarshalEasyJSON(in)
					out.Data = append(out.Data, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch(out *jwriter.Writer, in UserResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Data {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch(l, v)
}
func easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch1(in *jlexer.Lexer, out *UserData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "login":
			out.Login = string(in.String())
		case "display_name":
			out.DisplayName = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "broadcaster_type":
			out.BroadcasterType = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "profile_image_url":
			out.ProfileImageURL = string(in.String())
		case "offline_image_url":
			out.OfflineImageURL = string(in.String())
		case "view_count":
			out.ViewCount = int(in.Int())
		case "email":
			out.Email = string(in.String())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch1(out *jwriter.Writer, in UserData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix)
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"display_name\":"
		out.RawString(prefix)
		out.String(string(in.DisplayName))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"broadcaster_type\":"
		out.RawString(prefix)
		out.String(string(in.BroadcasterType))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"profile_image_url\":"
		out.RawString(prefix)
		out.String(string(in.ProfileImageURL))
	}
	{
		const prefix string = ",\"offline_image_url\":"
		out.RawString(prefix)
		out.String(string(in.OfflineImageURL))
	}
	{
		const prefix string = ",\"view_count\":"
		out.RawString(prefix)
		out.Int(int(in.ViewCount))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch1(l, v)
}
func easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch2(in *jlexer.Lexer, out *UnbanRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "broadcaster_name":
			out.BroadcasterName = string(in.String())
		case "broadcaster_login":
			out.BroadcasterLogin = string(in.String())
		case "broadcaster_id":
			out.BroadcasterID = string(in.String())
		case "moderator_id":
			out.ModeratorID = string(in.String())
		case "moderator_login":
			out.ModeratorLogin = string(in.String())
		case "moderator_name":
			out.ModeratorName = string(in.String())
		case "user_id":
			out.UserID = string(in.String())
		case "user_login":
			out.UserLogin = string(in.String())
		case "user_name":
			out.UserName = string(in.String())
		case "text":
			out.Text = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "resolved_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ResolvedAt).UnmarshalJSON(data))
			}
		case "resolution_text":
			out.ResolutionText = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch2(out *jwriter.Writer, in UnbanRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"broadcaster_name\":"
		out.RawString(prefix)
		out.String(string(in.BroadcasterName))
	}
	{
		const prefix string = ",\"broadcaster_login\":"
		out.RawString(prefix)
		out.String(string(in.BroadcasterLogin))
	}
	{
		const prefix string = ",\"broadcaster_id\":"
		out.RawString(prefix)
		out.String(string(in.BroadcasterID))
	}
	{
		const prefix string = ",\"moderator_id\":"
		out.RawString(prefix)
		out.String(string(in.ModeratorID))
	}
	{
		const prefix string = ",\"moderator_login\":"
		out.RawString(prefix)
		out.String(string(in.ModeratorLogin))
	}
	{
		const prefix string = ",\"moderator_name\":"
		out.RawString(prefix)
		out.String(string(in.ModeratorName))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.String(string(in.UserID))
	}
	{
		const prefix string = ",\"user_login\":"
		out.RawString(prefix)
		out.String(string(in.UserLogin))
	}
	{
		const prefix string = ",\"user_name\":"
		out.RawString(prefix)
		out.String(string(in.UserName))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"resolved_at\":"
		out.RawString(prefix)
		out.Raw((in.ResolvedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"resolution_text\":"
		out.RawString(prefix)
		out.String(string(in.ResolutionText))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UnbanRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UnbanRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UnbanRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UnbanRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch2(l, v)
}
func easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch3(in *jlexer.Lexer, out *StreamMarker) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "position_seconds":
			out.PositionSeconds = int(in.Int())
		case "description":
			out.Description = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch3(out *jwriter.Writer, in StreamMarker) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"position_seconds\":"
		out.RawString(prefix)
		out.Int(int(in.PositionSeconds))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StreamMarker) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StreamMarker) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StreamMarker) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StreamMarker) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch3(l, v)
}
func easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch4(in *jlexer.Lexer, out *StreamData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "user_id":
			out.UserID = string(in.String())
		case "user_login":
			out.UserLogin = string(in.String())
		case "user_name":
			out.UserName = string(in.String())
		case "game_id":
			out.GameID = string(in.String())
		case "game_name":
			out.GameName = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]string, 0, 4)
					} else {
						out.Tags = []string{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.Tags = append(out.Tags, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "viewer_count":
			out.ViewerCount = int(in.Int())
		case "started_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.StartedAt).UnmarshalJSON(data))
			}
		case "language":
			out.Language = string(in.String())
		case "thumbnail_url":
			out.ThumbnailURL = string(in.String())
		case "tag_ids":
			if in.IsNull() {
				in.Skip()
				out.TagIds = nil
			} else {
				in.Delim('[')
				if out.TagIds == nil {
					if !in.IsDelim(']') {
						out.TagIds = make([]interface{}, 0, 4)
					} else {
						out.TagIds = []interface{}{}
					}
				} else {
					out.TagIds = (out.TagIds)[:0]
				}
				for !in.IsDelim(']') {
					var v5 interface{}
					if m, ok := v5.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v5.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v5 = in.Interface()
					}
					out.TagIds = append(out.TagIds, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "is_mature":
			out.IsMature = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch4(out *jwriter.Writer, in StreamData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.String(string(in.UserID))
	}
	{
		const prefix string = ",\"user_login\":"
		out.RawString(prefix)
		out.String(string(in.UserLogin))
	}
	{
		const prefix string = ",\"user_name\":"
		out.RawString(prefix)
		out.String(string(in.UserName))
	}
	{
		const prefix string = ",\"game_id\":"
		out.RawString(prefix)
		out.String(string(in.GameID))
	}
	{
		const prefix string = ",\"game_name\":"
		out.RawString(prefix)
		out.String(string(in.GameName))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.Tags {
				if v6 > 0 {
					out.RawByte(',')
				}
				out.String(string(v7))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"viewer_count\":"
		out.RawString(prefix)
		out.Int(int(in.ViewerCount))
	}
	{
		const prefix string = ",\"started_at\":"
		out.RawString(prefix)
		out.Raw((in.StartedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"language\":"
		out.RawString(prefix)
		out.String(string(in.Language))
	}
	{
		const prefix string = ",\"thumbnail_url\":"
		out.RawString(prefix)
		out.String(string(in.ThumbnailURL))
	}
	{
		const prefix string = ",\"tag_ids\":"
		out.RawString(prefix)
		if in.TagIds == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.TagIds {
				if v8 > 0 {
					out.RawByte(',')
				}
				if m, ok := v9.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v9.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v9))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"is_mature\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsMature))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StreamData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StreamData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StreamData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StreamData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch4(l, v)
}
func easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch5(in *jlexer.Lexer, out *Pagination) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cursor":
			out.Cursor = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch5(out *jwriter.Writer, in Pagination) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"cursor\":"
		out.RawString(prefix[1:])
		out.String(string(in.Cursor))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Pagination) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Pagination) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Pagination) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Pagination) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch5(l, v)
}
func easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch6(in *jlexer.Lexer, out *GetUnbanRequestsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]UnbanRequest, 0, 0)
					} else {
						out.Data = []UnbanRequest{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v10 UnbanRequest
					(v10).UnmarshalEasyJSON(in)
					out.Data = append(out.Data, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pagination":
			(out.Pagination).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch6(out *jwriter.Writer, in GetUnbanRequestsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Data {
				if v11 > 0 {
					out.RawByte(',')
				}
				(v12).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"pagination\":"
		out.RawString(prefix)
		(in.Pagination).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetUnbanRequestsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetUnbanRequestsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetUnbanRequestsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetUnbanRequestsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch6(l, v)
}
func easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch7(in *jlexer.Lexer, out *GetStreamsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]StreamData, 0, 0)
					} else {
						out.Data = []StreamData{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v13 StreamData
					(v13).UnmarshalEasyJSON(in)
					out.Data = append(out.Data, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pagination":
			(out.Pagination).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch7(out *jwriter.Writer, in GetStreamsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Data {
				if v14 > 0 {
					out.RawByte(',')
				}
				(v15).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"pagination\":"
		out.RawString(prefix)
		(in.Pagination).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetStreamsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetStreamsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetStreamsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetStreamsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch7(l, v)
}
func easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch8(in *jlexer.Lexer, out *GetFollowedChannelsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "total":
			out.Total = int(in.Int())
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]FollowedChannel, 0, 0)
					} else {
						out.Data = []FollowedChannel{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v16 FollowedChannel
					(v16).UnmarshalEasyJSON(in)
					out.Data = append(out.Data, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pagination":
			(out.Pagination).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch8(out *jwriter.Writer, in GetFollowedChannelsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"total\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Total))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Data {
				if v17 > 0 {
					out.RawByte(',')
				}
				(v18).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"pagination\":"
		out.RawString(prefix)
		(in.Pagination).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetFollowedChannelsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetFollowedChannelsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetFollowedChannelsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetFollowedChannelsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch8(l, v)
}
func easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch9(in *jlexer.Lexer, out *GetEventSubSubscriptionsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "total":
			out.Total = int(in.Int())
		case "total_cost":
			out.TotalCost = int(in.Int())
		case "max_total_cost":
			out.MaxTotalCost = int(in.Int())
		case "pagination":
			(out.Pagination).UnmarshalEasyJSON(in)
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]EventSubData, 0, 0)
					} else {
						out.Data = []EventSubData{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v19 EventSubData
					(v19).UnmarshalEasyJSON(in)
					out.Data = append(out.Data, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch9(out *jwriter.Writer, in GetEventSubSubscriptionsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"total\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Total))
	}
	{
		const prefix string = ",\"total_cost\":"
		out.RawString(prefix)
		out.Int(int(in.TotalCost))
	}
	{
		const prefix string = ",\"max_total_cost\":"
		out.RawString(prefix)
		out.Int(int(in.MaxTotalCost))
	}
	{
		const prefix string = ",\"pagination\":"
		out.RawString(prefix)
		(in.Pagination).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.Data {
				if v20 > 0 {
					out.RawByte(',')
				}
				(v21).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetEventSubSubscriptionsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetEventSubSubscriptionsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetEventSubSubscriptionsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetEventSubSubscriptionsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch9(l, v)
}
func easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch10(in *jlexer.Lexer, out *GetChatSettingsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]ChatSettingData, 0, 1)
					} else {
						out.Data = []ChatSettingData{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v22 ChatSettingData
					(v22).UnmarshalEasyJSON(in)
					out.Data = append(out.Data, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch10(out *jwriter.Writer, in GetChatSettingsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.Data {
				if v23 > 0 {
					out.RawByte(',')
				}
				(v24).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetChatSettingsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetChatSettingsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetChatSettingsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetChatSettingsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch10(l, v)
}
func easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch11(in *jlexer.Lexer, out *FollowedChannel) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "broadcaster_id":
			out.BroadcasterID = string(in.String())
		case "broadcaster_login":
			out.BroadcasterLogin = string(in.String())
		case "broadcaster_name":
			out.BroadcasterName = string(in.String())
		case "followed_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.FollowedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch11(out *jwriter.Writer, in FollowedChannel) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"broadcaster_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.BroadcasterID))
	}
	{
		const prefix string = ",\"broadcaster_login\":"
		out.RawString(prefix)
		out.String(string(in.BroadcasterLogin))
	}
	{
		const prefix string = ",\"broadcaster_name\":"
		out.RawString(prefix)
		out.String(string(in.BroadcasterName))
	}
	{
		const prefix string = ",\"followed_at\":"
		out.RawString(prefix)
		out.Raw((in.FollowedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FollowedChannel) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FollowedChannel) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FollowedChannel) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FollowedChannel) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch11(l, v)
}
func easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch12(in *jlexer.Lexer, out *EventSubTransportRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "method":
			out.Method = string(in.String())
		case "callback":
			out.Callback = string(in.String())
		case "conduit_id":
			out.ConduitID = string(in.String())
		case "secret":
			out.Secret = string(in.String())
		case "session_id":
			out.SessionID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch12(out *jwriter.Writer, in EventSubTransportRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"method\":"
		out.RawString(prefix[1:])
		out.String(string(in.Method))
	}
	{
		const prefix string = ",\"callback\":"
		out.RawString(prefix)
		out.String(string(in.Callback))
	}
	{
		const prefix string = ",\"conduit_id\":"
		out.RawString(prefix)
		out.String(string(in.ConduitID))
	}
	{
		const prefix string = ",\"secret\":"
		out.RawString(prefix)
		out.String(string(in.Secret))
	}
	{
		const prefix string = ",\"session_id\":"
		out.RawString(prefix)
		out.String(string(in.SessionID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventSubTransportRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventSubTransportRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventSubTransportRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventSubTransportRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch12(l, v)
}
func easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch13(in *jlexer.Lexer, out *EventSubTransport) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "method":
			out.Method = string(in.String())
		case "conduit_id":
			out.ConduitID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch13(out *jwriter.Writer, in EventSubTransport) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"method\":"
		out.RawString(prefix[1:])
		out.String(string(in.Method))
	}
	{
		const prefix string = ",\"conduit_id\":"
		out.RawString(prefix)
		out.String(string(in.ConduitID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventSubTransport) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventSubTransport) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventSubTransport) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventSubTransport) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch13(l, v)
}
func easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch14(in *jlexer.Lexer, out *EventSubData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "version":
			out.Version = string(in.String())
		case "condition":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Condition = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v25 string
					v25 = string(in.String())
					(out.Condition)[key] = v25
					in.WantComma()
				}
				in.Delim('}')
			}
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "transport":
			(out.Transport).UnmarshalEasyJSON(in)
		case "cost":
			out.Cost = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch14(out *jwriter.Writer, in EventSubData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.String(string(in.Version))
	}
	{
		const prefix string = ",\"condition\":"
		out.RawString(prefix)
		if in.Condition == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v26First := true
			for v26Name, v26Value := range in.Condition {
				if v26First {
					v26First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v26Name))
				out.RawByte(':')
				out.String(string(v26Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"transport\":"
		out.RawString(prefix)
		(in.Transport).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"cost\":"
		out.RawString(prefix)
		out.Int(int(in.Cost))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventSubData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventSubData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventSubData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventSubData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch14(l, v)
}
func easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch15(in *jlexer.Lexer, out *EmoteResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]EmoteData, 0, 0)
					} else {
						out.Data = []EmoteData{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v27 EmoteData
					(v27).UnmarshalEasyJSON(in)
					out.Data = append(out.Data, v27)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "template":
			out.Template = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch15(out *jwriter.Writer, in EmoteResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v28, v29 := range in.Data {
				if v28 > 0 {
					out.RawByte(',')
				}
				(v29).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"template\":"
		out.RawString(prefix)
		out.String(string(in.Template))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EmoteResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EmoteResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EmoteResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EmoteResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch15(l, v)
}
func easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch16(in *jlexer.Lexer, out *EmoteImage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url_1x":
			out.URL1X = string(in.String())
		case "url_2x":
			out.URL2X = string(in.String())
		case "url_4x":
			out.URL4X = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch16(out *jwriter.Writer, in EmoteImage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"url_1x\":"
		out.RawString(prefix[1:])
		out.String(string(in.URL1X))
	}
	{
		const prefix string = ",\"url_2x\":"
		out.RawString(prefix)
		out.String(string(in.URL2X))
	}
	{
		const prefix string = ",\"url_4x\":"
		out.RawString(prefix)
		out.String(string(in.URL4X))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EmoteImage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EmoteImage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EmoteImage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EmoteImage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch16(l, v)
}
func easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch17(in *jlexer.Lexer, out *EmoteData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "images":
			(out.Images).UnmarshalEasyJSON(in)
		case "format":
			if in.IsNull() {
				in.Skip()
				out.Format = nil
			} else {
				in.Delim('[')
				if out.Format == nil {
					if !in.IsDelim(']') {
						out.Format = make([]string, 0, 4)
					} else {
						out.Format = []string{}
					}
				} else {
					out.Format = (out.Format)[:0]
				}
				for !in.IsDelim(']') {
					var v30 string
					v30 = string(in.String())
					out.Format = append(out.Format, v30)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "scale":
			if in.IsNull() {
				in.Skip()
				out.Scale = nil
			} else {
				in.Delim('[')
				if out.Scale == nil {
					if !in.IsDelim(']') {
						out.Scale = make([]string, 0, 4)
					} else {
						out.Scale = []string{}
					}
				} else {
					out.Scale = (out.Scale)[:0]
				}
				for !in.IsDelim(']') {
					var v31 string
					v31 = string(in.String())
					out.Scale = append(out.Scale, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "theme_mode":
			if in.IsNull() {
				in.Skip()
				out.ThemeMode = nil
			} else {
				in.Delim('[')
				if out.ThemeMode == nil {
					if !in.IsDelim(']') {
						out.ThemeMode = make([]string, 0, 4)
					} else {
						out.ThemeMode = []string{}
					}
				} else {
					out.ThemeMode = (out.ThemeMode)[:0]
				}
				for !in.IsDelim(']') {
					var v32 string
					v32 = string(in.String())
					out.ThemeMode = append(out.ThemeMode, v32)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch17(out *jwriter.Writer, in EmoteData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"images\":"
		out.RawString(prefix)
		(in.Images).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"format\":"
		out.RawString(prefix)
		if in.Format == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v33, v34 := range in.Format {
				if v33 > 0 {
					out.RawByte(',')
				}
				out.String(string(v34))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"scale\":"
		out.RawString(prefix)
		if in.Scale == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v35, v36 := range in.Scale {
				if v35 > 0 {
					out.RawByte(',')
				}
				out.String(string(v36))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"theme_mode\":"
		out.RawString(prefix)
		if in.ThemeMode == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v37, v38 := range in.ThemeMode {
				if v37 > 0 {
					out.RawByte(',')
				}
				out.String(string(v38))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EmoteData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EmoteData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EmoteData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EmoteData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch17(l, v)
}
func easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch18(in *jlexer.Lexer, out *CreatedClip) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "edit_url":
			out.EditURL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch18(out *jwriter.Writer, in CreatedClip) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"edit_url\":"
		out.RawString(prefix)
		out.String(string(in.EditURL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreatedClip) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreatedClip) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreatedClip) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreatedClip) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch18(l, v)
}
func easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch19(in *jlexer.Lexer, out *CreateStreamMarkerResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]StreamMarker, 0, 1)
					} else {
						out.Data = []StreamMarker{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v39 StreamMarker
					(v39).UnmarshalEasyJSON(in)
					out.Data = append(out.Data, v39)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch19(out *jwriter.Writer, in CreateStreamMarkerResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v40, v41 := range in.Data {
				if v40 > 0 {
					out.RawByte(',')
				}
				(v41).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateStreamMarkerResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateStreamMarkerResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateStreamMarkerResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateStreamMarkerResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch19(l, v)
}
func easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch20(in *jlexer.Lexer, out *CreateStreamMarkerRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserID = string(in.String())
		case "description":
			out.Description = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch20(out *jwriter.Writer, in CreateStreamMarkerRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.UserID))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateStreamMarkerRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateStreamMarkerRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateStreamMarkerRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateStreamMarkerRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch20(l, v)
}
func easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch21(in *jlexer.Lexer, out *CreateEventSubSubscriptionResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]EventSubData, 0, 0)
					} else {
						out.Data = []EventSubData{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v42 EventSubData
					(v42).UnmarshalEasyJSON(in)
					out.Data = append(out.Data, v42)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "total":
			out.Total = int(in.Int())
		case "total_cost":
			out.TotalCost = int(in.Int())
		case "max_total_cost":
			out.MaxTotalCost = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch21(out *jwriter.Writer, in CreateEventSubSubscriptionResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v43, v44 := range in.Data {
				if v43 > 0 {
					out.RawByte(',')
				}
				(v44).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"total\":"
		out.RawString(prefix)
		out.Int(int(in.Total))
	}
	{
		const prefix string = ",\"total_cost\":"
		out.RawString(prefix)
		out.Int(int(in.TotalCost))
	}
	{
		const prefix string = ",\"max_total_cost\":"
		out.RawString(prefix)
		out.Int(int(in.MaxTotalCost))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateEventSubSubscriptionResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateEventSubSubscriptionResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateEventSubSubscriptionResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateEventSubSubscriptionResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch21(l, v)
}
func easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch22(in *jlexer.Lexer, out *CreateEventSubSubscriptionRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "version":
			out.Version = string(in.String())
		case "condition":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Condition = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v45 string
					v45 = string(in.String())
					(out.Condition)[key] = v45
					in.WantComma()
				}
				in.Delim('}')
			}
		case "transport":
			(out.Transport).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch22(out *jwriter.Writer, in CreateEventSubSubscriptionRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.String(string(in.Version))
	}
	{
		const prefix string = ",\"condition\":"
		out.RawString(prefix)
		if in.Condition == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v46First := true
			for v46Name, v46Value := range in.Condition {
				if v46First {
					v46First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v46Name))
				out.RawByte(':')
				out.String(string(v46Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"transport\":"
		out.RawString(prefix)
		(in.Transport).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateEventSubSubscriptionRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateEventSubSubscriptionRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateEventSubSubscriptionRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateEventSubSubscriptionRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch22(l, v)
}
func easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch23(in *jlexer.Lexer, out *CreateClipResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]CreatedClip, 0, 2)
					} else {
						out.Data = []CreatedClip{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v47 CreatedClip
					(v47).UnmarshalEasyJSON(in)
					out.Data = append(out.Data, v47)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch23(out *jwriter.Writer, in CreateClipResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v48, v49 := range in.Data {
				if v48 > 0 {
					out.RawByte(',')
				}
				(v49).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateClipResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateClipResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateClipResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateClipResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch23(l, v)
}
func easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch24(in *jlexer.Lexer, out *ChatSettingData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "broadcaster_id":
			out.BroadcasterID = string(in.String())
		case "slow_mode":
			out.SlowMode = bool(in.Bool())
		case "slow_mode_wait_time":
			out.SlowModeWaitTime = int(in.Int())
		case "follower_mode":
			out.FollowerMode = bool(in.Bool())
		case "follower_mode_duration":
			out.FollowerModeDuration = int(in.Int())
		case "subscriber_mode":
			out.SubscriberMode = bool(in.Bool())
		case "emote_mode":
			out.EmoteMode = bool(in.Bool())
		case "unique_chat_mode":
			out.UniqueChatMode = bool(in.Bool())
		case "non_moderator_chat_delay":
			out.NonModeratorChatDelay = bool(in.Bool())
		case "non_moderator_chat_delay_duration":
			out.NonModeratorChatDelayDuration = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch24(out *jwriter.Writer, in ChatSettingData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"broadcaster_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.BroadcasterID))
	}
	{
		const prefix string = ",\"slow_mode\":"
		out.RawString(prefix)
		out.Bool(bool(in.SlowMode))
	}
	{
		const prefix string = ",\"slow_mode_wait_time\":"
		out.RawString(prefix)
		out.Int(int(in.SlowModeWaitTime))
	}
	{
		const prefix string = ",\"follower_mode\":"
		out.RawString(prefix)
		out.Bool(bool(in.FollowerMode))
	}
	{
		const prefix string = ",\"follower_mode_duration\":"
		out.RawString(prefix)
		out.Int(int(in.FollowerModeDuration))
	}
	{
		const prefix string = ",\"subscriber_mode\":"
		out.RawString(prefix)
		out.Bool(bool(in.SubscriberMode))
	}
	{
		const prefix string = ",\"emote_mode\":"
		out.RawString(prefix)
		out.Bool(bool(in.EmoteMode))
	}
	{
		const prefix string = ",\"unique_chat_mode\":"
		out.RawString(prefix)
		out.Bool(bool(in.UniqueChatMode))
	}
	{
		const prefix string = ",\"non_moderator_chat_delay\":"
		out.RawString(prefix)
		out.Bool(bool(in.NonModeratorChatDelay))
	}
	{
		const prefix string = ",\"non_moderator_chat_delay_duration\":"
		out.RawString(prefix)
		out.Int(int(in.NonModeratorChatDelayDuration))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChatSettingData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChatSettingData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChatSettingData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChatSettingData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch24(l, v)
}
func easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch25(in *jlexer.Lexer, out *BanUserRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch25(out *jwriter.Writer, in BanUserRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		(in.Data).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BanUserRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BanUserRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BanUserRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BanUserRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch25(l, v)
}
func easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch26(in *jlexer.Lexer, out *BanUserData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserID = string(in.String())
		case "duration":
			out.DurationInSeconds = int(in.Int())
		case "reason":
			out.Reason = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch26(out *jwriter.Writer, in BanUserData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.UserID))
	}
	if in.DurationInSeconds != 0 {
		const prefix string = ",\"duration\":"
		out.RawString(prefix)
		out.Int(int(in.DurationInSeconds))
	}
	{
		const prefix string = ",\"reason\":"
		out.RawString(prefix)
		out.String(string(in.Reason))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BanUserData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BanUserData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3f687995EncodeGithubComJulezDevChatuinoTwitch26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BanUserData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BanUserData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3f687995DecodeGithubComJulezDevChatuinoTwitch26(l, v)
}
